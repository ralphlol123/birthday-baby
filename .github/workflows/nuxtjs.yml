# .github/workflows/deploy.yml
#
# Build a static Nuxt 3 site with pnpm and publish to GitHub Pages
# ───────────────────────────────────────────────────────────────

name: Deploy Nuxt site to GitHub Pages

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pages:    write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # Passed through to nuxt.config.ts
      NUXT_APP_BASE_URL: /birthday-baby/
      # Redundant safety-belt: tells Nitro to use the GH-Pages preset
      NITRO_PRESET: github_pages

    steps:
      # 1️⃣  Check out source
      - uses: actions/checkout@v4

      # 2️⃣  Install Node 20 (no built-in cache, avoids the pnpm-not-found error)
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      # 3️⃣  Install the pnpm CLI and add it to $PATH
      - uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false        # we’ll run `pnpm install` ourselves

      # 4️⃣  Restore / save pnpm store for faster repeats
      - name: Restore pnpm cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      # 5️⃣  Install dependencies from lock-file
      - run: pnpm install --no-frozen-lockfile
      
      # 6️⃣  Generate the *static* site  → .output/public
      - run: pnpm run generate

      # 7️⃣  Upload the prerendered files as artifact for the deploy job
      - uses: actions/upload-pages-artifact@v3
        with:
          path: ./.output/public

  # ──────────────────────────────────────────────────────────
  # Publish the artifact to GitHub Pages
  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
